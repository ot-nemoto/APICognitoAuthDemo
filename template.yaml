AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Resources:
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UsernameAttributes:
      - email
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      ExplicitAuthFlows:
      - USER_PASSWORD_AUTH
  APIGatewayAuthNDemoApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: v1
      MethodSettings:
      - DataTraceEnabled: true
        LoggingLevel: INFO
        ResourcePath: "/*"
        HttpMethod: "*"
      DefinitionBody:
        openapi: "3.0.1"
        info:
          version: "1.0"
          title: APIGatewayAuthNDemo
        paths:
          /:
            get:
              responses:
                "200":
                  description: "200 response"
                  content: {}
              security:
              - APIGatewayAuthNDemo-authorizer: []
              x-amazon-apigateway-integration:
                type: aws
                httpMethod: post
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DescribeInstancesFunction.Arn}/invocations"
                responses:
                  default:
                    statusCode: "200"
                passthroughBehavior: WHEN_NO_TEMPLATES
        securityDefinitions:
          APIGatewayAuthNDemo-authorizer:
            type: apiKey
            name: Authentication
            in: header
            x-amazon-apigateway-authtype: cognito_user_pools
            x-amazon-apigateway-authorizer:
              providerARNs:
              - !GetAtt UserPool.Arn
              type: cognito_user_pools
  DescribeInstancesFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref DescribeInstancesFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${APIGatewayAuthNDemoApi}/*/GET/"
  DescribeInstancesFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.7
      Code:
        ZipFile: |
          import json
          import os
          import logging
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          import boto3
          def handler(event, context):
            try:
              logger.info(json.dumps(event))
              client = boto3.client('ec2')
              response = client.describe_instances()
              instanceIds = []
              for reservation in response.get('Reservations', []):
                for instance in reservation.get('Instances', []):
                  instanceIds.append(instance.get('InstanceId'))
              return {
                'instanceIds': instanceIds
              }
            except Exception as e:
              logger.error(e)
              raise e
      Handler: index.handler
      Role: !GetAtt DescribeInstancesFunctionRole.Arn
  DescribeInstancesFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: DescribeInstancesFunctionPolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - ec2:DescribeInstances
            Resource: "*"

Outputs:
  UserPoolId:
    Value: !Ref UserPool
  UserPoolClientId:
    Value: !Ref UserPoolClient
  InvokeURL:
    Value: !Sub "https://${APIGatewayAuthNDemoApi}.execute-api.${AWS::Region}.amazonaws.com/v1/"
  APIGatewayLogUrl:
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#logStream:group=API-Gateway-Execution-Logs_${APIGatewayAuthNDemoApi}/v1"
  LambdaLogUrl:
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#logStream:group=/aws/lambda/${DescribeInstancesFunction}"
